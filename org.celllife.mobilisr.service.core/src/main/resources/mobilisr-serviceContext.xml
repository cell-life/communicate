<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<context:annotation-config />

	<util:properties id="quartzProperties" location="classpath:quartz.properties" />

	<!-- ######################### -->
	<!-- NOTE -->
	<!-- If you change the group name or job name of any of the quartz jobs
			you must also change them in QuartzServiceImpl -->
	<!-- ######################### -->
	
	<!-- PROCESS CAMPAIGN CONTACTS PROGRESS -->
	<bean name="processCampContactProgressJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="name" value="processCampContactProgress" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.BeanMethodInvokerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="beanName" value="backgroundService" />
				<entry key="methodName" value="processCampContactProgress" />
			</map>
		</property>
	</bean>

	<bean id="processCampContactProgressTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="jobDetail" ref="processCampContactProgressJob" />
		<!-- run every day at 23:30 -->
		<property name="cronExpression" value="0 30 23 * * ?" />
	</bean>

	<!-- PROCESS CAMPAIGN FINISH -->
	<bean name="processCampFinishJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="name" value="processCampFinish" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.BeanMethodInvokerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="beanName" value="backgroundService" />
				<entry key="methodName" value="processCampFinish" />
			</map>
		</property>
	</bean>
	
	<bean id="processCampFinishTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="jobDetail" ref="processCampFinishJob" />
		<!-- run every day at 00:00 -->
		<property name="cronExpression" value="0 0 0 * * ?" />
	</bean>

	<!-- UPDATE ORGANISATION BALANCE -->
	<bean name="updateOrganizationBalancesJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="name" value="updateOrganizationBalances" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.BeanMethodInvokerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="beanName" value="backgroundService" />
				<entry key="methodName" value="updateOrganizationBalances" />
			</map>
		</property>
	</bean>
	
	<bean id="updateOrganizationBalancesTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="jobDetail" ref="updateOrganizationBalancesJob" />
		<!-- 60 seconds -->
		<property name="startDelay" value="60000" />
		<!-- repeat every hour -->
		<property name="repeatInterval" value="3600000" />
	</bean>
	
	<!-- PROCESS MAIL QUEUE -->
	<bean name="processMailJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="name" value="processMailQueue" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.BeanMethodInvokerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="beanName" value="backgroundService" />
				<entry key="methodName" value="processMailQueue" />
			</map>
		</property>
	</bean>
	
	<bean id="processMailTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="jobDetail" ref="processMailJob" />
		<!-- 60 seconds -->
		<property name="startDelay" value="60000" />
		<!-- repeat every 60 seconds -->
		<property name="repeatInterval" value="60000" />
	</bean>
	
	<!-- CHECK FOR UNDELIVERD MESSAGES -->
	<bean id="checkMessagesDeliveredTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="jobDetail" ref="checkMessagesDeliveredJob" />
		<!-- run every day at 00:15 -->
		<property name="cronExpression" value="0 15 0 * * ?" />
	</bean>
		
	<bean name="checkMessagesDeliveredJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="false"/>
		<property name="group" value="backgroundServices" />
		<property name="name" value="checkMessagesDelivered" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.BeanMethodInvokerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="beanName" value="backgroundService" />
				<entry key="methodName" value="checkMessagesDelivered" />
			</map>
		</property>
	</bean>	
	
	<!-- DELETE OLD REPORTS -->
	<bean name="deleteOldReportsJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="name" value="deleteOldReports" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.BeanMethodInvokerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="beanName" value="staticReportService" />
				<entry key="methodName" value="deleteOldReports" />
			</map>
		</property>
	</bean>
	
	<bean id="deleteOldReportsTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="jobDetail" ref="deleteOldReportsJob" />
		<!-- run every day at 00:00 -->
		<property name="cronExpression" value="0 0 0 * * ?" />
	</bean>
	
	<!-- FIXED CAMPAIGN JOB RUNNER -->
	<bean name="fixedCampaignJobRunner" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="false"/>
		<property name="durability" value="true"/>
		<property name="requestsRecovery" value="true"/>
		<property name="group" value="campaignJobs" />
		<property name="name" value="fixedCampaignJobRunner" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.FixedCampJobRunner" />
	</bean>
	
	<!-- DAILY / FLEXI CAMPAIGN JOB RUNNER -->
	<bean name="relativeCampaignJobRunner" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="false"/>
		<property name="durability" value="true"/>
		<property name="requestsRecovery" value="true"/>
		<property name="group" value="campaignJobs" />
		<property name="name" value="relativeCampaignJobRunner" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.RelativeCampJobRunner" />
	</bean>
	
	<!-- SCHEDULED REPORTS JOB RUNNER -->
	<bean name="scheduledReportsJobRunner" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="false"/>
		<property name="durability" value="true"/>
		<property name="requestsRecovery" value="true"/>
		<property name="group" value="scheduledReports" />
		<property name="name" value="scheduledReportsJobRunner" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.ScheduledReportsJobRunner" />
	</bean>
	
	<!-- WELCOME JOB RUNNER -->
	<bean name="welcomeJobRunner" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="false"/>
		<property name="durability" value="true"/>
		<property name="requestsRecovery" value="true"/>
		<property name="group" value="campaignJobs" />
		<property name="name" value="welcomeJobRunner" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.WelcomeJobRunner" />
	</bean>

	<!-- INCOMING MESSAGE QUEUE PROCESSOR -->
	<bean name="incomingQueueProcessorJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="name" value="processIncomingQueue" />
		<property name="jobClass" value="org.celllife.mobilisr.service.qrtz.beans.BeanMethodInvokerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="beanName" value="backgroundService" />
				<entry key="methodName" value="triggerMessageProcessing" />
			</map>
		</property>
	</bean>
	
	<bean id="processIncomingQueueTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="volatility" value="true"/>
		<property name="group" value="backgroundServices" />
		<property name="jobDetail" ref="incomingQueueProcessorJob" />
		<!-- 60 seconds -->
		<property name="startDelay" value="60000" />
		<!-- repeat every 5 minutes -->
		<property name="repeatInterval" value="300000" />
	</bean>
	
	<bean id="qrtzScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean" destroy-method="destroy">
		<property name="exposeSchedulerInRepository" value="true" />
		<property name="autoStartup" value="true" />
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="quartzProperties" ref="quartzProperties" />
		<property name="taskExecutor" ref="quartzTaskExecutor" />
		<property name="triggers">
			<list>
				<ref bean="processCampContactProgressTrigger" />
				<ref bean="processCampFinishTrigger" />
				<ref bean="updateOrganizationBalancesTrigger" />
				<ref bean="processMailTrigger" />
				<ref bean="deleteOldReportsTrigger" />
				<ref bean="processIncomingQueueTrigger" />
				<ref bean="checkMessagesDeliveredTrigger" />
			</list>
		</property>
		<property name="jobDetails">
			<list>
				<ref bean="fixedCampaignJobRunner" />
				<ref bean="relativeCampaignJobRunner" />
				<ref bean="welcomeJobRunner" />
				<ref bean="scheduledReportsJobRunner" />
			</list>
		</property>
	</bean>

	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />

	<bean id="quartzTaskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="50" />
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		<qualifier value="quartzTaskExecutor" />
	</bean>

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="username" value="${mailSender.username}" />
		<property name="password" value="${mailSender.password}" />
		<property name="host" value="${mailSender.host}" />
		<property name="port" value="${mailSender.port}" />
		<property name="javaMailProperties">
			<props>
				<!-- Use SMTP-AUTH to authenticate to SMTP server -->
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<!-- Use TLS to encrypt communication with SMTP server -->
				<prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
				<prop key="mail.debug">${mail.debug}</prop>
			</props>
		</property>
	</bean>

	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<value>
				resource.loader=class
				class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
			</value>
		</property>
	</bean>

	<bean id="staticReportService"
		class="org.celllife.reporting.service.impl.JasperReportServiceImpl" init-method="buildService">
		<property name="dataSource" ref="dataSource" />
		<property name="generatedReportFolder" value="${COMMUNICATE_HOME}/reports/generated"/>
		<property name="scheduledReportFolder" value="${COMMUNICATE_HOME}/reports/scheduled"/>
		<property name="sourceReportFolder" value="classpath:reports"/>
		<property name="reportLoader">
			<bean class="org.celllife.reporting.service.impl.SpringResourceLoader"/>
		</property>
	</bean>
	
	
</beans>


